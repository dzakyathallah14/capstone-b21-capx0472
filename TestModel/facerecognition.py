# -*- coding: utf-8 -*-
"""FaceRecognitionAzithromycin.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XlvWTQvhUaIwgEebpqD-asfYwK60nopz

# Face Recognition By Azithromycin Team

##Import All Libraries Needed
"""

!pip install face_recognition
!pip install --upgrade pip
import cv2 
import numpy as np
import face_recognition
import os
import shutil
from sklearn.metrics import explained_variance_score
from google.cloud import storage
import os
import joblib
from google.colab import auth

app = Flask(__name__)
@app.route('/')
def index():
    return render_template('index.html')
@app.route('/predict/', methods=['GET','POST'])
def myproccess():
    if request.methods == "POST":
        #get from data\
        
        os.environ["Bangkit Capstone Project"] = "rock-web-312913"
        GOOGLE_APPLICATION_CREDENTIALS='creds.json'
        PROJECT_ID='rock-web-312913'
        
        file = request.form.get('file')
    """##Global Variable """

    #informasi path di gcloud dan local
    #cloud storage
        train ='training_pictures-1'
        test = 'test_pictures-1'

    #local directory
        lc_train_path = '/content/train/'
        lc_test_path = '/content/test/'

        feedList = False
        feedComp = False

    #buat source blob test
        ltest = list_blobs(test, 'test')
        ltrain = list_blobs(train, 'train')
        download_blobs(test, 'test', str(ltest[0]))
        upload_blob(test, lc_test_path, file)
        images, classname = listName(lc_test_path)
        encodeListKnown = findEncoding(images)
        imagestest = cv2.imread('/content/raisa.jpg',0)
        imagestest = cv2.cvtColor(imagestest, cv2.COLOR_BAYER_BG2RGB)
        encodeTest = face_recognition.face_encodings(imagestest)[0]
        results = face_recognition.compare_faces(encodeListKnown, encodeTest)

        for i in results:
            if results[i] == True:
                print("It's a picture " + className[i])
            else :
                print("It's a picture of no one " )

def list_blobs(bucket_name, source):
    """Lists all the blobs in the bucket."""
    # bucket_name = "your-bucket-name"
    storage_client = storage.Client.from_service_account_json(GOOGLE_APPLICATION_CREDENTIALS)

    # Note: Client.list_blobs requires at least package version 1.17.0.
    blobs = storage_client.list_blobs(bucket_name)
    listOfBlob = []
    for blob in blobs:
        listOfBlob.append(blob.name)
    return listOfBlob

#buat source blob test
def download_blobs(bucket_name, source, file_name):
    #list directori
    file_name.lower()
    dataInDir = os.listdir(lc_train_path)
    trueFalse = False
    for name in dataInDir:
        if name == file_name:
            trueFalse = true
            feedList = true

        else:

            """Lists all the blobs in the bucket."""
            # bucket_name = "your-bucket-name"
            storage_client = storage.Client.from_service_account_json(GOOGLE_APPLICATION_CREDENTIALS)

            # Note: Client.list_blobs requires at least package version 1.17.0.
            blobs = storage_client.list_blobs(bucket_name)
            listOfBlob = []
            for blob in blobs:
                blob.download_to_filename('./' + blob.name)  # Download
                listOfBlob.append(blob.name)
                shutil.move("/content/{}".format(blob.name), "/content/{}/{}".format(source, blob.name))
    return listOfBlob

# Upload the result of images training to google cloud storage
def upload_blob(bucket_name, source_file_name, destination_blob_name):
    """Uploads a file to the bucket."""
    # The ID of your GCS bucket
    # bucket_name = "your-bucket-name"
    # The path to your file to upload
    # source_file_name = "local/path/to/file"
    # The ID of your GCS object
    # destination_blob_name = "storage-object-name"

    storage_client = storage.Client.from_service_account_json(GOOGLE_APPLICATION_CREDENTIALS)
    bucket = storage_client.bucket(bucket_name)
    blob = bucket.blob(destination_blob_name)

    blob.upload_from_filename(source_file_name)

    print(
        "File {} uploaded to {}.".format(
            source_file_name, destination_blob_name
        )
    )

def listName(path):
    myList = os.listdir(path)
    images = []
    className = []
    for name in myList:
        curImage = cv2.imread(f'{path}/{name}',0)
        images.append(curImage)
        className.append(os.path.splitext(name)[0])
    print(className)
    return images, className

def findEncoding(images):
    encodeList = []
    for img in images:
        img = cv2.cvtColor(img, cv2.COLOR_BAYER_BG2RGB)
        encode = face_recognition.face_encodings(img)[0]
        encodeList.append(encode)
    return encodeList



#acc = explained_variance_score((encodeListKnown), (encodeTest))
#print(acc)